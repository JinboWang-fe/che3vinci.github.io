<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jinbo]]></title>
  <link href="http://www.wangjinbo.me/atom.xml" rel="self"/>
  <link href="http://www.wangjinbo.me/"/>
  <updated>2015-10-25T18:10:47+08:00</updated>
  <id>http://www.wangjinbo.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[列表式导航和卡片式导航]]></title>
    <link href="http://www.wangjinbo.me/14454724191839.html"/>
    <updated>2015-10-22T08:06:59+08:00</updated>
    <id>http://www.wangjinbo.me/14454724191839.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搜索，排序和过滤]]></title>
    <link href="http://www.wangjinbo.me/14454705552155.html"/>
    <updated>2015-10-22T07:35:55+08:00</updated>
    <id>http://www.wangjinbo.me/14454705552155.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">内容型网站</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[登陆和注册设计]]></title>
    <link href="http://www.wangjinbo.me/14454705456773.html"/>
    <updated>2015-10-22T07:35:45+08:00</updated>
    <id>http://www.wangjinbo.me/14454705456773.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">1.延后注册登陆时机</a>
</li>
<li>
<a href="#toc_1">2. 安全性</a>
<ul>
<li>
<a href="#toc_2">是否需要密码确认?</a>
</li>
<li>
<a href="#toc_3">密码是否以密码模式展现</a>
</li>
<li>
<a href="#toc_4">是否需要记住密码?</a>
</li>
<li>
<a href="#toc_5">手机/用户名/邮箱注册？</a>
</li>
<li>
<a href="#toc_6">验证码</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">3. 方便性</a>
</li>
<li>
<a href="#toc_8">4.登陆</a>
</li>
<li>
<a href="#toc_9">5.解决方案</a>
</li>
<li>
<a href="#toc_10">6. 刷脸登陆—新技术的发展</a>
</li>
</ul>


<h1 id="toc_0">1.延后注册登陆时机</h1>

<ul>
<li>注册过程本身是有难度，容易造成用户流失。</li>
<li>用户只想使用软件提供的服务，而不想登陆或者注册
所以如果可以尽可能延长用户的注册或者登陆时机，在必须登陆时才让用户注册或者登陆。
例如内容型的App（视频/音乐/小说等）用户即使不登陆或者注册也可以让用查看部分内容的信息。在用户想发表评论等操作时可以用户注册。
如果App需要标识出用户是不用登陆也可以标识出唯一用户的。</li>
</ul>

<h1 id="toc_1">2. 安全性</h1>

<h2 id="toc_2">是否需要密码确认?</h2>

<p>没有必要进行密码确认。</p>

<h2 id="toc_3">密码是否以密码模式展现</h2>

<p>由于手机是私人设备，直接输入密码时由于身体的阻挡不容易被人偷窥到密码。所以可以不必设置为<strong>*</strong>状的密码模式。<br/>
由于手机上输入文字不方便，防止密码输入出错。所以可以把显示密码。<br/>
<img src="media/14454705456773/14457580528188.jpg" width = "50%" height = "50%"  align="center" ></p>

<p>点击右侧的眼睛图标即可查看密码的明文。</p>

<h2 id="toc_4">是否需要记住密码?</h2>

<p>不用记住密码。如果token失效，用户重新登陆。</p>

<h2 id="toc_5">手机/用户名/邮箱注册？</h2>

<ol>
<li>邮箱注册：使用邮箱的用户不多</li>
<li>用户名注册：需要另外绑定邮箱和手机号才能找回密码</li>
<li>手机注册：使用移动设备的人基本上人手一台手机。用手机号方便找回密码。所以手机号注册是比较方便安全的注册方法</li>
</ol>

<h2 id="toc_6">验证码</h2>

<p>手机上没有验证码的必要。因为手机注册会通过短信进行确认。服务器端可以通过一定的规则对机器人登陆进行判断。</p>

<h1 id="toc_7">3. 方便性</h1>

<p>最方便的登陆模式就是不用登陆。<br/>
1. 注册过程中，如果输入了已经注册的账号，则自动提示用户找回密码</p>

<h1 id="toc_8">4.登陆</h1>

<blockquote>
<p>我刚从Appstore下载本软件一个软件，应该如何做?</p>
</blockquote>

<h1 id="toc_9">5.解决方案</h1>

<p>要同时满足安全性和方便些的需求，我认为直接开放平台账号登陆是最优的解决方法。除非非常有必要否则不增加手机号注册/登陆的功能</p>

<table>
<thead>
<tr>
<th>方案</th>
<th>原因</th>
</tr>
</thead>

<tbody>
<tr>
<td>开放平台账号登陆</td>
<td>1. <strong>快捷</strong> </br>- 直接登录，不用输入账号密码 </br> 2. <strong>安全</strong> </br>- 不用考虑找回密码的问题</br> - 不用考虑盗号问题</td>
</tr>
</tbody>
</table>

<p><img src="media/14454705456773/14457620733465.jpg" width = "270" height = "480" alt="图片名称" align=center /> <img src="media/14454705456773/14457627370964.jpg" width = "270" height = "480" alt="图片名称" align=center /></p>

<h1 id="toc_10">6. 刷脸登陆—新技术的发展</h1>

<p>随着新的生物鉴别技术的发展，以后</p>

<table>
<thead>
<tr>
<th>新技术</th>
<th>使用App</th>
</tr>
</thead>

<tbody>
<tr>
<td>人脸识别</td>
<td>QQ安全</td>
</tr>
<tr>
<td>指纹识别</td>
<td>iphone touchID</td>
</tr>
<tr>
<td>瞳孔识别</td>
<td>xxx</td>
</tr>
</tbody>
</table>

<p>也许有一天，所有的产品的在账号认证方面方面能更加自然，更加方便且有更加安全。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.vimrc实用配置]]></title>
    <link href="http://www.wangjinbo.me/14446586518389.html"/>
    <updated>2015-10-12T22:04:11+08:00</updated>
    <id>http://www.wangjinbo.me/14446586518389.html</id>
    <content type="html"><![CDATA[
<p>　　从念大学开始到开始工作头几年，我都一直使用vim作为主要的开发和编辑工具。为了实现IDE的自动补全功能，我尝试过各种自动补齐插件；为了实现一个悦目的colorschme，自己去学着写vimscript脚本来修改语法配色文件；又为了方便的编辑多个文件，研究buffer/tab/window等各种奇技淫巧....。我折腾这些的目的，很大程度是为了打造出一个IDE效果的开发环境。但经过无数尝试后，我才明白作为一个通用的editor，vim的确功能无比强大。但是要比专业的IDE（集成文本编辑，语法补齐，编译，调试，版本管理，发布等功能于一体的开发工具)相比，在项目开发方面，vim体验还是相对较弱。</p>

<span id="more"></span><!-- more -->

<p>　　在经历这漫长折腾，浪费大量时间后，我才领悟一个道理:“专注目标，而非工具”。无论使用何种工具(IDE，vim亦或者emacs）都是为了开发程序。工具只是实现程序开发这一目标的手段而已。当我们已经有能高效率完成项目开发这一目标的工具时，就没有必要把时间浪费在学习其他工具上。除非这个工具的确能带来生产力的显著提高。当然，我认为vim在项目开发方面很难做到比IDE有更高的开发效率。<br/>
　　<br/>
　　如果你同意我对vim定位的看法(perfect editor only)，那么你可以尝试我一直使用的vimrc配置文件。这个配置文件对提升你的文本编辑效率定会有很大的帮助。</p>

<h2 id="toc_0">我的.vimrc文件</h2>

<pre><code class="language-c">&quot;===================&quot;
&quot;1.基本设置&quot;
&quot;===================&quot;
set wildmenu&quot;按TAB键时命令行自动补齐&quot;
set ignorecase&quot;忽略大小写&quot;
set number &quot;显示行号&quot;
set visualbell&quot;禁止响铃&quot;
set ruler&quot;显示当前光标位置&quot;
set autoread&quot;文件在Vim之外修改过，自动重新读入&quot;
set autowrite&quot;设置自动保存内容&quot;
set autochdir&quot;当前目录随着被编辑文件的改变而改变&quot;
set nocp &quot;使用vim而非vi&quot;
set mouse=a&quot;开启鼠标支持&quot;
map 9 $&quot;通过9跳转到行末尾,0默认跳转到行首&quot;
map &lt;silent&gt;  &lt;C-A&gt;  gg v G &quot;Ctrl-A 选中所有内容&quot;
filetype on &quot;启动文件类型检查&quot;
filetype plugin on &quot;运行vim加载文件类型插件&quot;

&quot;===================&quot;
&quot;2.程序开发相关的设置&quot;
&quot;===================&quot;
&quot;(1)使用%来选择语句块，然后使用快捷键zf来折叠&quot;
set foldmethod=marker
&quot;(2)注释：选中文本后，输入;c即可注释，输入;u 即可取消注释&quot;
vmap &lt;silent&gt; ;c :s/^/\/\//&lt;CR&gt;:noh&lt;CR&gt;
vmap &lt;silent&gt; ;u :s/\/\///&lt;CR&gt;:noh&lt;CR&gt;
&quot;(3) 编译和运行程序的快捷键&quot;
map &lt;silent&gt;  &lt;C-F5&gt; :make %:r &lt;CR&gt;:!./%:r&lt;CR&gt;  &quot;Ctrl+F5: 执行makefile文件&quot;
map &lt;silent&gt;  \rr :!gcc  -Wall -g  %  -lm -o  %:r&lt;CR&gt; :!./%:r&lt;CR&gt;&quot;\rr: 编译并运行当前文件的对应程序&quot;
map  &lt;silent&gt;  \rc :!gcc  -Wall -g -c % &lt;CR&gt;&quot;\rc:编译当前文件&quot;
&quot;(4)源文件和头文件之间快速切换&quot;
nmap ,a :find %:t:r. &quot;,a: 切换到任意文件。需要手动输入文件的后缀&quot;
nmap ,c :find %:t:r.c&lt;cr&gt; &quot;,c: 切换到同名c语言的源文件&quot;
nmap ,C :tabf %:t:r.cpp&lt;cr&gt; &quot;,C: 切换到同名c++的源文件,以tabpage形式打开&quot;
nmap ,h :find %:t:r.h&lt;cr&gt;&quot;,h 切换到当前文件对于的头文件&quot;
&quot;(5)其他&quot;
syn on &quot;开启语法高亮功能&quot;
set pastetoggle=&lt;F11&gt; &quot;F11来支持切换paste和nopaste状态。&quot;

&quot;============&quot;
&quot;3. 多窗口操作&quot;
&quot;============&quot;
map + &lt;C-W&gt;+    &quot;+：扩大窗口&quot;
map - &lt;C-W&gt;-        &quot;- :   缩小窗口&quot;
map &lt;C-l&gt; &lt;C-W&gt;l &quot;C-l 移动到右侧窗口&quot;
map &lt;C-h&gt; &lt;C-W&gt;h &quot;C-h 移动到左侧窗口&quot;
map &lt;C-j&gt; &lt;C-W&gt;j   &quot;C-j 移动到下方窗口&quot;
map &lt;C-k&gt; &lt;C-W&gt;k &quot;C-k 移动到上方窗口&quot;

&quot;============&quot;
&quot;4. tabpages切换&quot;
&quot;============&quot;
map &lt; :tabpre&lt;CR&gt; 
map &gt; :tabnex&lt;CR&gt;

&quot;=============&quot;
&quot;5. 设置缩进&quot;
&quot;=============&quot;
set cindent &quot;c/c++自动缩进&quot;
set smartindent
set autoindent&quot;参考上一行的缩进方式进行自动缩进&quot;
filetype indent on &quot;根据文件类型进行缩进&quot;
set softtabstop=4 &quot;4 character as a tab&quot;
set shiftwidth=4
set smarttab 

&quot;=================&quot;
&quot;6. 当前文件内搜索选项&quot;
&quot;=================&quot;
set hlsearch &quot;开启搜索结果的高亮显示&quot;
set incsearch &quot;边输入边搜索(实时搜索)&quot;

&quot;==============&quot;
&quot;7. 会话功能&quot;
&quot;==============&quot;
autocmd VimLeave * :mksession! ~/.last.vim &quot;保存当前会话&quot;
autocmd VimEnter * :so ~/.last.vim &quot;加载会话&quot;

&quot;==========================&quot;
&quot;8.不要交换文件和备份文件，减少冲突&quot;
&quot;==========================&quot;
set noswapfile
set nobackup
set nowritebackup

&quot;=============&quot;
&quot;9. 查找和替换文本&quot;
&quot;=============&quot;
nmap ;s :%s/\&lt;&lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;\&gt;/
nmap ;g :vimgrep &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;

&quot;========================&quot;
&quot; 10.快捷文本输入&quot;
&quot;========================&quot;
map &lt;silent&gt;  \d a&lt;C-R&gt;=strftime(&quot;%Y/%m/%d %A&quot;)&lt;CR&gt;  &quot;快捷输入日期&quot;
map &lt;silent&gt;  \t a&lt;C-R&gt;=strftime(&quot;%Y/%m/%d %H:%M:%S&quot;)&lt;CR&gt;&quot;快捷输入时间&quot;
map &lt;silent&gt;   ,d :split ~/Dropbox/Doc/ &lt;CR&gt; 
iab --l  -------------------- 
iab ==l  ====================

&quot;========================&quot;
&quot;11.txt文件按照wiki语法高亮&quot;
&quot;========================&quot;
 autocmd BufNewFile *.txt set ft=confluencewiki 
 autocmd BufEnter *.txt set ft=confluencewiki

 &quot;======================&quot;
 &quot;12.设置文件编码，解决中文乱码问题&quot;
 &quot;======================&quot;
 if has(&quot;multi_byte&quot;)
    set fileencodings=utf-8,ucs-bom,cp936,cp1250,big5,euc-jp,euc-kr,latin1
 else
    echoerr &quot;Sorry, this version of (g)vim was not compiled with multi_byte&quot;
 endif

 &quot;===================&quot;
 &quot;13. 对gvim 的设置&quot;
 &quot;==================&quot;
 if has(&quot;gui_running&quot;)
     colorscheme  morning
     set guifont=Monaco:h13
     set guioptions=mr &quot;只显示菜单和右侧滚动条&quot;
 endif

</code></pre>

<h2 id="toc_1">奇巧淫技</h2>

<p>想要使用vim高效完成文本编辑工作，除了以上的配置文件，如果你还能掌握如下技巧，定会让你编辑能力更上一层楼。</p>

<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>

<tbody>
<tr>
<td><strong>%</strong></td>
<td>自动匹配括号[]{}()</td>
</tr>
<tr>
<td><strong>*</strong></td>
<td>查找光标处的单词</td>
</tr>
<tr>
<td><strong>:find</strong></td>
<td>搜索文件</td>
</tr>
<tr>
<td><strong>gd</strong></td>
<td>高亮显示所有相同单词</td>
</tr>
<tr>
<td><strong>=</strong></td>
<td>格式化选中的代码（相当于ident）</td>
</tr>
<tr>
<td><strong>Ctrl-v</strong></td>
<td>选中多列并且对多列文本同时编辑</td>
</tr>
<tr>
<td><strong>Ctrl-p</strong></td>
<td>自动补齐。请查看帮助文档omni-complete</td>
</tr>
<tr>
<td><strong>xp</strong></td>
<td>交换两个字母的顺序</td>
</tr>
<tr>
<td><strong>:TOhtml</strong></td>
<td>把当前文件转换为html文件</td>
</tr>
<tr>
<td><strong>dd</strong></td>
<td>删除当前行</td>
</tr>
<tr>
<td><strong>:buf filename</strong></td>
<td>通过buffer名字来切换buffer</td>
</tr>
</tbody>
</table>

<h2 id="toc_2">最后</h2>

<p>掌握vim需要上手练习。熟练的手感能大幅提升编辑速度。但在你vim技能不断提升时，还请牢记:&quot;关注目标，而非工具”</p>

]]></content>
  </entry>
  
</feed>
